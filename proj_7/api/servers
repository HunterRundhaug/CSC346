#!/home/ubuntu/oci-env/bin/python3

import cgi
import os
import sqlite3
import json
import oci
import http.cookies

def main():
    
    # Get request method, defaults to GET if none was defined
    requestMethod = os.environ.get("REQUEST_METHOD", "GET")

    form = cgi.FieldStorage()
    path_info = os.environ.get("PATH_INFO", "").strip().split('/')
    user_cgi = form.getvalue("user", "")
    desc_cgi = form.getvalue("description", "")

    if len(path_info) == 1:
        cursor = connectToDB()
        cursor.execute("SELECT * FROM servers")
        data = cursor.fetchall()
        jsonResponse(data)
        cursor.close()
        return

    elif len(path_info) > 0:
        cookie = getHttpCookie()
        if cookie == None:
            return # should responde with error
        user = getUserFromSession(cookie)
        cursor = connectToDB()
        cursor.execute("SELECT * FROM servers WHERE owner = ?", (user.strip(),))
        data = cursor.fetchall()
        htmlResponseForJson(data)
        cursor.close()
        return

def getUserFromSession(cookie):
    if "session_id" not in cookie:
        return None
    session_id = cookie["session_id"].value
    cursor = connectToDB()
    cursor.execute("SELECT * FROM sessions WHERE session_id = ?", (session_id,))
    data = cursor.fetchone()
    return data[1]

def getHttpCookie():
    cookie_string = os.environ.get("HTTP_COOKIE", "");
    cookie = http.cookies.SimpleCookie()
    cookie.load(cookie_string)
    return cookie

def connectToDB():
    conn = sqlite3.connect("/usr/lib/cgi-bin/CSC346/proj_7/test.db")
    cursor = conn.cursor()
    return cursor

def jsonResponse(jData):
    servers = {}
    for server in jData:
        servD = {}
        servD["owner"] = server[1]
        servD["description"] = server[2]
        servD["instance_id"] = server[3]
        servD["ip"] = server[5]
        servD["ready"] = server[4]
        servers[server[0]] = servD
    
    print("Status: 200 OK")
    print("Content-Type: application/json")
    print()
    print(f"{json.dumps(servers)}")


def plainOkResponse():
    print("Status: 200 OK")
    print("Content-Type: text/plain")
    print()
    print(f"Hello world")

def htmlResponseForJson(json):
    divString = ""
    for vmData in json:
        id = vmData[0]
        owner = vmData[1]
        desc = vmData[2]
        instance = vmData[3]
        ready = vmData[4]
        ip = vmData[5]
        divString += f'''
                <ul><li>{id}</li> <li>{owner}</li>
                    <li>{desc}</li> <li>{instance}</li>
                    <li>{ready}</li> <li>{ip}</li>
            '''

    style = """
        <style> 
            body{
                font-family: Arial, sans-serif;
            }
            li{
                display:inline;
                border: 1px solid rgb(100,100,100);
                padding: 10px;
                margin:0px;
            }
        </style>
    """
    html = f"""<!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>My Virtual Machines</title>
    </head>
    <body>
        <h1>Virtual Machine Library</h1>
        <div style="border:1px solid black"> 
            <h3>- - - - id | owner | description | instance ID | ready | ip </h3>
            {divString}
    </div>
        {style}
    </body>
    </html>
    """
    print("Status: 200 OK")
    print("Content-Type: text/html")
    print()
    print(html)

main()
